06/20






Sevlet, 서블릿
- 웹 서버측(사이트)에서 자바를 사용한 프로그램을 동작시키는 기술(환경)
- 자바 진영의 첫번째 웹 기술
- 자바 프로그램 > 웹 페이지를 생산 > 동적 웹페이지
- 서버측에서 동작하는 웹 페이지 생산(제작) 프로그램을 만드는 기술
- 필기 메모

- 필기파일위치확인


Servlet Class
- 자바 프로그램
- 알바생


Servlet Calss 작성규칙


1. 서블릿 클래스 선언
	a. javax.servlet.Servlet 인터페이스를 구현한다. > 고비용, 복잡함
	a. javax.servlet.http.HttpServlet 클래스를 상속받는다. > 저비용, 간편함 > 선택

2. doGet/doPost 메소드 서넌
	- 둘 중 하나 선언 or 둘 다 선언
	- 클라이언트(브라우저)의 요청이 들어오면 자동으로 호출되는 메소드
	- 커피 만드는 메소드 > 동적으로 HTML 페이지를 만드는 역할
	- 메소드 작성 규칙
		a. 매개변수 작성
			1. java.servlet.http.HttpServletRequest
			2. java.servlet.http.HttpServeletResponse
		b. 예외 미루기
			1. java.io.IOException
			2. java.servlet.ServeletException

3. 동적 HTML 페이지 작성 구현
	- doGet/doPost 내부에서 문서를 작성하기 위한 코드를 작성한다.
	- Http
	
4. 브라우저가 자바 파일(서블릿, 알바생)을 호출한다.
	- 자바는 웹 기술이 아니다 > 웹 상에선느 자바 프로그램을 호출할 수 없다.
	- 브라우저가 웹 상에서 자바 파일을 호출
	
	

서블릿, Servlet
- 앱 애플리케이션을 만드는 기술
- CGI, PHP, ASP, JSP, ASP.NET, spring..

CGI, Common Gateway Interface
- 브라우저와 웹서버간의 정보(데이터, 페이지)를 주고 받는 규약
- 이걸 기반으로 여러 프로그래밍 언어를 사용해서 기술들을 구현함.


PHP, Personal HyperText Preoporcessor
- C 기반 스크립트 언어
- 개인 사이트 제작용 > 기업용으로도 많이 사용


ASP, Active Server Page
- MS 스크립트 언어(VB Script)

ASP.NET
- C#
- VB.NET
- MS 최신 기술 


JSP, Java Server Page
- MS ASP의 자바 버전

Python
- Django

Spring
- Servlet + JSP + 확장



서블릿 처리 동작 순서
- 서블릿 생성 ~ 클라이언트 요청 ~ 클라이언트 응답 ~ 서블릿 소멸
- 알바생의 시작~끝
- 서블릿의 관리 > 서블릿 컨테이너(=톰캣)가 생성부터 소멸까지 관리/운영한다.

	(- 톰캣 > 웹서버이자 응용프로그램 서버이자 서블릿컴테이너도 겸함_

1. 소스 작성 > Ex01.java

2. 서버 시작 > 아파치 톰캣 실행

-------------------------------사이트 시작(웹 애플리케이션 실행)

3. 브라우저(사용자) > URL 요청(가상주소)
	- http://localhost:8090/ServletTest/ex03.do

4. Http Request가 발생


5. 4번 요청이 아파치 톰캣에게 저달

6. 아파치 톰캣은 해당 요청을 서버측에서 추가 처리 판단?
	- 서버 추가 처리 해야한다면 > 담당자에게 넘김(서블릿)
						  >> 서버 콛, 서버 프로그래밍
						  
	- 서버에서 추가 작업할 필요 x > 클라이언트에게 그대로 반환(HTML< CSS, JavaScript 등)
							>> 클라이언트는 그걸 받아서 해석하고 화면에 출력하는 등 여러 내부처리를 함.
							>> 클라이언트 코드

7. 서블릿 컨테이너(아파치 톰캣)이 web.xml에 적혀있는 서블릿 클래스를 접근
	- Ex03.java
	
8. 컴파일
	- Ex03.class

9. 실행 > 메모리 인스턴스(= 서블릿)

10. 서블릿의 doGet/doPost 메소드 호출(약속)

11. doGet/doPost > PrintWriter > 돌려줄 HTML 페이지 작성

12. 임시 HTML 페이지 > 서블릿 컨테이너 (아파치 톰캣) > 브라우저에게 반환
	- HTTP Response 발생
	
13. 브라우저 측 > 캐시 저장(임시 페이지)

14. 임시 페이지 > 브라우저 로딩 > 화면 출력



	**이건 선생님 그림 설명 메모 **
	현재 요청을
	1) 서버에서 처리(X) -> 일단 그 페이지를 가서 처음부터 끝까지 모든 소스를 읽고 그걸 그대로 클라이언트한테 리턴함.
						=> 자기가 처리를 못할것 같다 싶은 파일을 만나면 무조건 그 파일 내용을 가감없이 브라우저에게 돌려줌.
						
	2) 서버에서 처리(O)
	둘 중 하나로 확인함. 
	
	
	Ex03.java를 알아서 컴파일해서 > Ex03.class 
	
	서버 메모리에 생긴 Ex03 객체 >> 이걸 서블릿이라고 함. (실체화된 서블릿 역할을 맡은 오브젝트 = 서블릿-알바생)
	서블릿이 doGet() 호출 > 임시 페이지가 생성됨. (여기에 HTML , CSS, JavaScript 코드 O ) -> 이 페이지는 톰캣이 관리
	톰캣이 다시 이 페이지를 요청했던 브라우저에게 돌려줌. (이 돌아가는 작업을 HTTP Response라고 함)
	
	브라우저는 돌려받은 페이지를 일단 자신의 컴퓨터의 하드디스크에 저장을 함. (클라이언트 보조기억장치(HDD, SSD))
	> 캐시(cache). 
	
	
	**선생님이 그려준 그림 직접 그려보면서 그 전과정 이해하고 남한테 설명할 수 있을정도로 공부하기 *** 
	
	
	
	1. Apache HTTP > 웹 서버
	2. Apache Tomcat > 응용 프로그램 서버(컨테이너) + 웹서버 기능 포함
	
	웹 서버 + 응용 프로그램 서버
	(아파치 웹서버 + 아파치 톰캣을 연동하기도) 
	>> 근데 우리는 이미 이 둘이 세트로 되어있는걸 설치했음!
	
	요즘엔 NginX(웹서버) + 아파치톰캣 연동해서 쓰기도 함.
	
	면접
	1. 웹서버 뭐 썼어 > 아파치 톰캣
	2. 응용 프로그램 서버 > 아파치 톰캣
	3. WAS(Web Application SErver) > 아파치 톰캣
	




데이터 전송 > 데이터 수신

- Ex04_Send.java > 전송 페이지
- Ex04_Receive.java > 수신 페이지






		
		
		
		
		
		
		
		
		
		