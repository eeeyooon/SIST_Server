
토이 프로젝트(06/28 ~ 06/29)
- New > Dynamic Web Project > "ToyProject" > 톰캣 8.5, Module 3.1 > Context root ("toy") > 체크박스 체크(web.xml)


요구사항
1. 게시판
2. 회원 (인증)
3. JSP Model 2
4. Oracle 11g
5. Bootstrap + jQuery
6. 부가 기능(차트, 맵 등..)


DB 설계
- 점차적..

패키지 구조
- "com.test.toy" 		> 메인
- "com.test.toy.board"  > 게시판
- "com.test.toy.member" > 회원
- "com.test.toy.etc"	> 부가 기능

폴더 구조
- webapp > WEB-INF > "views"						> 뷰 루트(toy 패키지에 대응)
						> "board"					> 게시판
						> "member"					> 회원
						> "etc"						> 부가 기능
						> "inc"						> 조각 페이지
						
 
라이브러리 설치
- webapp > WEB-INF > lib
						> ojdbc6.jar				> 오라클
						> jstl-1.2.jar				> JSTL
						> lombok.jar				> Lombok
						> cos.jar					> 파일 업로드

클라이언트 라이브러리 (WEB -INF로 들어가면 XX)
- webapp > "asset"					
				> "css"
				> "js"
				> "fonts
				> "images
				> 파일 업로드 폴더도	


기본 템플릿 페이지
- com.test.toy > "Template.java"
- views > "template.jsp"


-webapp > WEB-INF > inc > "header.jsp"



시작 페이지
- com.test.toy > "Index.java"
- views > "index.jsp"


회원 가입
- com.test.toy.member > "Register.java"
- views > member > "register.jsp"
					"registerok.jsp"
					
					
					
--코드 확인


로그인/로그아웃
- com.test.toy.member > "Login.java"
					  > "LoginOk.java"
					  > "Logout.java"
					  
- views > member > "login.jsp"
				 > "loginok.jsp"
				 > "logout.jsp"
				 


회원 정보
- com.test.toy.member > "Info.java"
- views > member > "info.jsp"



회원 탈퇴
- com.test.toy.member 	> "Unregister.java"
						> "unregisterok.java"
- views > member > "unregister.jsp"
			     > "unregisterok.jsp"



게시판
- com.test.toy.board > "BoardDAO.java"
				     > "BoardDTO.java"
				     > "List.java"
				     > "Add.java"
				     > "AddOk.java"
				     > "View.java"
				     > "Edit.java"
				     > "EditOk.java"
				     > "Del.java"
				     > "Del.java"
				     > "DelOk.java"
				     
- views > board > "list.jsp"
				> "add.jsp"
				> "addok.jsp"
				> "view.jsp"
				> "edit.jsp"
				> "editok.jsp"
				> "del.jsp"
				> "delok.jsp"
	
--------------------------------여기까지가 기본 CRUD-----------------------			

검색
> 보통 리스트에서  작업 완!
					
댓글쓰기
> 보통 뷰에서!
- com.test.toy.board > "AddCommentOk.java"
(jsp는 안만들고 서블릿에서만 해결 > 출력 내용이 많지 않아서 >> 나중에 프젝할때 만들지 말지 고민해보고 결정해)
					 > "CommentDTO.java"
					 ++++ 근데 딱 우연히 얘한테 문제가 생겨서 jsp 만들기로 (다른 ok는 돼 하필 여기만 안돼)
					 
댓글 삭제
- com.test.toy.board > "DelCommentOk.java"


댓글 수정
- com.test.toy.board > "EditCommentOk.java"


								     
페이징
- 가상으로 일정 단위의 게시물을 가져오는 기법 > SQL 사용

- 더미 데이터 만들기



답변쓰기(계층형 게시판, 답변 게시판)    
- 테이블 수정 > thread, depth 컬럼 추가
- thread, depth 컬럼의 규칙!!


1. 새글 쓰기
	- /toy/board/add.do
	a. 현존하는 모든 게시물 중에서 가장 큰 thread 값을 찾아서, 그 값에 +1000을 한 값을 새글의 thread값으로 사용한다.
	b. 새글의 depth는 항상 0을 넣는다.
	
	
2. 답변글 쓰기
	- /toy/board/add.do?reply=1
	a. 현존하는 모든 게시물의 thread값을 대상으로 현재 작성 중인 답변글의 부모글 thread값보다 작고, 이전 새글을 thread값보다 큰 thread를 모두 찾아서 -1을 한다.
	b. 현재 답변글의 thread값은 부모글의 thread-1을 넣는다.
	c. 현재 답변글의 depth값은 부모글의 depth+1을 넣는다.
	
	
	


파일업로드(07/01)
- 게시판 첨부파일

- com.test.toy.board > "Download.java" > jsp 필요x



태그(#)
- 해시 태그 > (카테고리) 검색 기능

https://www.jqueryscript.net/form/Tiny-Text-Field-Based-Tags-Input-Plugin-For-jQuery-Tagify.html
	-> 다운

- webapp > asset > css > tagify.css
				 > js  > jQuery.tagify.min.js

- webapp > WEB-INF > lib > json-simple-1.1.1.jar



싫어요/좋아요
- 싫어요 카운트, 좋아요 카운트
- com.test.toy.board > "GoodBad.java"



07/04


차트 연동
- 회원 > 게시물 생산 > 차트 출력

- com.test.toy.etc > "Chart.java"
- views > etc > "chart.jsp"





지도 연동
- 게시물 + 첨부파일(이미지 > 메타 정보 > 위도, 경도) > 지도 출력
- 지도 API 수업

-com.test.toy.etc > "Map.java"

-views > etc > "map01.jsp"


장소 CRUD
- 장소 즐겨찾기 + 지도 연동

맛집지도
- com.test.toy.etc > "Food.java" //목록
				   > "AddFood.java"
				   > "AddFoodOk.java"
				   > "EtcDAO.java"
				   > "FoodDTO.java"
				   > "CategoryDTO.java"
				   
- views > etc > "food.jsp"
			  > "addfood.jsp"
			  
			  				   

07/05



Ajax, Asynchronous JavaScript and XML
- 비동기 자바스크립트 and XML
- 자바스크립트 기반 비동기 통신 기법
- 브라우저와 웹 서버 간의 자바 스크립트를 사용한 데이터를 주고 받는 기술
- ~ 현재: 브라우저(크롬) ~ 웹 서버(아파치 톰캣)



네트워크 통신 방식
- 동기 통신
- 비동기 통신


Ajax 구현 방식
1. XMLHttpRequest 사용
2. jQuery Ajax 사용
3. fetch 사용




- "com.test.toy.ajax" > "AjaxDAO.java"
					  > "Ex01.java"
					  > "ReserachDTO.java"

- views > "ajax" > "ex01.jsp"

DB
- script.sql 이어서


서버 갱신 데이터 > 브라우저 전달 (새로고침을 해야 데이터가 전달이 됨.)
1. 새로고침 > 프로그램 (setTimer로 5초 뒤 자동으로 새로고침하게 함 > 계속 새로고침이 설정된 화면에 있어야 하고, 5초의 갭이 O)
2. <frame>, <iframe> 사용 -> 새로고침 문제를 조금 해결하긴 했는데 워낙 오래된 기술임.
3. Ajax <-> ActiveX, Applet
	-Ajax : 양방향은 아님. 그래도 1,2번 방법보단 유용
4. WebSocket : Ajax로 할 수 있는 일이면 Ajax로 하는게 나음. > WebSocket은 좀 더 까다롭고 비용이 듦.



Ajax
- com.test.toy.ajax > "Ex02.java"
- views > ajax > "ex02.jsp"
				ex02data2




 아이디 중복 검사
 - com.test.toy.ajax > "Ex03.java"
 					 > "IdCheck.java"
 					 > "IdCheckOk.java"
 					 




07/06

ajax 패키지 만들기

tblInsa 목록 페이지
- com.test.toy.ajax > "Ex06.java"
					> "Ex06Data.java"
- views > ajax > "ex06.jsp"


Ajax + CRUD 문제(수정뺴고)

- tblAddress 테이블(번호, 이름, 나이, 주소, 성별, 연락처)

- com.test.toy.ajax > "Ex07.java"		> "/ajax/ex07.do"
					> "Ex07Add.java"	> "/ajax/ex07add.do"
					> "Ex07Del.java"	> "/ajax/ex07del.do"
					> "AddressDTO.java"
- views > ajax > "ex07.jsp"


요구사항
- 모든 행동이 페이지 새로고침 없이 진행되게 구현하시오. (*****)
1. ex07.do 접속 시 > tblAddress의 모든 항목을 테이블에 출력하시오. > 전통 MVC 방식 (Ajax아니고)
2. 입력 폼 > 데이터 작성 > 등록하기 버튼 > DB에 insert :: Ajax 방식
								  > 방금 등록한 데이터를 테이블에 반영 (추가를 Ajax로 했으니 반영도 Ajax로)
3. 삭제 버튼 클릭 > DB에 delete :: Ajax 방식
			   > 방금 삭제된 데이터를 테이블에 반영

4. 상단 성별 버튼 클릭 > 클릭한 성별만 데이터에 반영 :: Ajax 방식
				   > "Ex07Search.java"
				   			   

















