06/20 + 06/21


- 새 프로젝트 생성 > New > Other > Web > Dynamic Web Project > Next > "JSPTest" > Target runtime(Apache Tomcat 8.5), Dynamic web module version(3.1) > Next > Next > Context root, Content directory, Generate web.xml(체크 O) > Finish


JSP, Java Server Pages
- 서블릿의 다음 버전


서블릿
1. 장점 > 자바 기반. 자바 구문을 사용할 수 있음. > 웹 페이지를 만드는데 사용 가능하다.
2. 단점 > 자바 기반. > 클라이언트 코드 작성이 불편함. + 가상 주소 매핑(web.xml)도 불편함 중에 하나


JSP
1. 장점 > HTML 문서 기반 > 클라이언트 코드 작성이 쉬움 + 가상 주소 매핑 불필요(web.xml) > 브라우저가 JSP를 직접 호출 가능(HTML 문서 기반이라서)
2. 단점 > HTML 문서 기반 > 자바 구문 작성이 불편함.


JSP 요소
1. JSP 지시자, JSP Directive
	- <%@ %>
	-page 지시자
		- <%@ page 속성="값" 속성="값" 속성="값" %>
		- 나머지 내용은 밑에서
	- include 지시자
	- taglib 지시자

2. 스크립트 요소, Scripting Elements
	- <% %>
	- 스크립틀릿
	- 익스프레션
	- 선언부
	
2.5. 내장 객체



3. 액션 태그, Action Tags
	- <jsp:XXX>, <c:XXX>..
	- 기본 액션 태그
	- 확장 액션 태그
	- 사용자 정의 액션 태그
	
	

page 지시자
	- <%@ page 속성="값" 속성="값" 속성="값" %>
	- JSP 페이지에 항상 존재하는 지시자
	- 1개 이상 작성할 수 있음.
	- JSP 컨테이너(아파치 톰캣)에게 해당 페이지의 정보를 알려줌.
	- <%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
    a. language="java"
    	- JSP 페이지에서 사용할 서버 프로그래밍 언어 지정 > 아직은 java뿐이라 고정값임.
    
    b. contentType="text/html; charset=UTF-8
    	- JSP 페이지 콘텐츠에 대한 기술
    	- text/html : MIME 타입 > HTML 문서라는 뜻
    	- charset=UTF-8 : 인코딩 > 톰캣이 JSP를 읽을 때 사용할 인코딩
    	- contentType="text/html; charset=ISO-8859-1" > 기본값
	
	c. pageEncoding="UTF-8"
		- 브라우저에게 돌려주는 페이지의 인코딩
		- resp.setCharacterEncoding("UTF-8"); //서블릿
		
	d. import="java.utill.Random" 추가
		- 패키지/클래스 참조
		- 자바 > import java.utill.Random;
		
	e. errorPage
	
	
include 지시자
- <%@ include file="URL" %>
- 특정 JSP 페이지(HTML, 텍스트파일 등)을 현재 JSP 페이지의 일부 영역으로 삽입하는 기능
- 조각 페이지




스크립틀릿, Scriptlet
- <% %>
- Script + Applet
- HTML 영역에서 Java를 사용가능한 영역을 제공
- *.java와 동일한 성질
- 사용 빈도 높음 > 비즈니스 코드 작성


표현식, Expression
- <%= 값 %>
- 값: 상수, 변수, 메소드 반환값 등..
- 해당 위치에 자바 값을 출력하는 용도


선언부, Declaration
- <%! %>
- 해당 JSP 페이지에서 사용할 클래스 멤버 변수와 메소드를 선언하는 영역
- JSP 선언부에서 선언된 메소드의 최대 영역은 해당 JSP 페이지이다. > 사용 제한
- 대신, 일반 자바 클래스를 만들어서 참조 가능 > 사용 권한



JSP 내장 객체, JSP Implicit Object
- 개발자가 직접 생성하지 않아도 JSP가 미리 만들어서 제공하는 객체
- 예약어로 제공
- request, response, session, pageContext (자주 사용)
- out, application (종종)
- config, page, exception (거의 사용x)


- request, session, pageContext, application
	- 객체 내부에 사용자 데이터를 저장할 수 있는 컬렉션을 가지고 있다. (********************************)
	- void setAttribute(String key, Object value)
	- Object getAttribute(String key)


request
- HttpServletRequest
1. 클라이언트에서 서버로 전송한 데이터를 가져오기
	-ex09_form.jsp : 사용자 입력 데이터 받는 역할 + 서버로 전송하기
	-ex09_ok.jsp : 전송된 데이터 수신하기
	
2. 클라이언트에서 서버로 전송한 데이터의 인코딩 처리


3. 클라이언트에서 서버로 전송할 때 관련 정보를 가져오기















