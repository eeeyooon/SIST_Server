06/20 + 06/21


- 새 프로젝트 생성 > New > Other > Web > Dynamic Web Project > Next > "JSPTest" > Target runtime(Apache Tomcat 8.5), Dynamic web module version(3.1) > Next > Next > Context root, Content directory, Generate web.xml(체크 O) > Finish


JSP, Java Server Pages
- 서블릿의 다음 버전


서블릿
1. 장점 > 자바 기반. 자바 구문을 사용할 수 있음. > 웹 페이지를 만드는데 사용 가능하다.
2. 단점 > 자바 기반. > 클라이언트 코드 작성이 불편함. + 가상 주소 매핑(web.xml)도 불편함 중에 하나


JSP
1. 장점 > HTML 문서 기반 > 클라이언트 코드 작성이 쉬움 + 가상 주소 매핑 불필요(web.xml) > 브라우저가 JSP를 직접 호출 가능(HTML 문서 기반이라서)
2. 단점 > HTML 문서 기반 > 자바 구문 작성이 불편함.


JSP 요소
1. JSP 지시자, JSP Directive
	- <%@ %>
	-page 지시자
		- <%@ page 속성="값" 속성="값" 속성="값" %>
		- 나머지 내용은 밑에서
	- include 지시자
	- taglib 지시자 > 06/23 때 수업

2. 스크립트 요소, Scripting Elements
	- <% %>
	- 스크립틀릿
	- 익스프레션
	- 선언부
	
2.5. 내장 객체



3. 액션 태그, Action Tags
	- <jsp:XXX>, <c:XXX>..
	- 기본 액션 태그
	- 확장 액션 태그
	- 사용자 정의 액션 태그
	
	

page 지시자
	- <%@ page 속성="값" 속성="값" 속성="값" %>
	- JSP 페이지에 항상 존재하는 지시자
	- 1개 이상 작성할 수 있음.
	- JSP 컨테이너(아파치 톰캣)에게 해당 페이지의 정보를 알려줌.
	- <%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
    a. language="java"
    	- JSP 페이지에서 사용할 서버 프로그래밍 언어 지정 > 아직은 java뿐이라 고정값임.
    
    b. contentType="text/html; charset=UTF-8
    	- JSP 페이지 콘텐츠에 대한 기술
    	- text/html : MIME 타입 > HTML 문서라는 뜻
    	- charset=UTF-8 : 인코딩 > 톰캣이 JSP를 읽을 때 사용할 인코딩
    	- contentType="text/html; charset=ISO-8859-1" > 기본값
	
	c. pageEncoding="UTF-8"
		- 브라우저에게 돌려주는 페이지의 인코딩
		- resp.setCharacterEncoding("UTF-8"); //서블릿
		
	d. import="java.utill.Random" 추가
		- 패키지/클래스 참조
		- 자바 > import java.utill.Random;
		
	e. errorPage
	
	
include 지시자
- <%@ include file="URL" %>
- 특정 JSP 페이지(HTML, 텍스트파일 등)을 현재 JSP 페이지의 일부 영역으로 삽입하는 기능
- 조각 페이지




스크립틀릿, Scriptlet
- <% %>
- Script + Applet
- HTML 영역에서 Java를 사용가능한 영역을 제공
- *.java와 동일한 성질
- 사용 빈도 높음 > 비즈니스 코드 작성


표현식, Expression
- <%= 값 %>
- 값: 상수, 변수, 메소드 반환값 등..
- 해당 위치에 자바 값을 출력하는 용도


선언부, Declaration
- <%! %>
- 해당 JSP 페이지에서 사용할 클래스 멤버 변수와 메소드를 선언하는 영역
- JSP 선언부에서 선언된 메소드의 최대 영역은 해당 JSP 페이지이다. > 사용 제한
- 대신, 일반 자바 클래스를 만들어서 참조 가능 > 사용 권한



JSP 내장 객체, JSP Implicit Object
- 개발자가 직접 생성하지 않아도 JSP가 미리 만들어서 제공하는 객체
- 예약어로 제공
- request, response, session, pageContext (자주 사용)
- out, application (종종)
- config, page, exception (거의 사용x)


- request, session, pageContext, application
	- 객체 내부에 사용자 데이터를 저장할 수 있는 컬렉션을 가지고 있다. (********************************)
	- void setAttribute(String key, Object value)
	- Object getAttribute(String key)


request
- HttpServletRequest
1. 클라이언트에서 서버로 전송한 데이터를 가져오기
	-ex09_form.jsp : 사용자 입력 데이터 받는 역할 + 서버로 전송하기
	-ex09_ok.jsp : 전송된 데이터 수신하기
	
2. 클라이언트에서 서버로 전송한 데이터의 인코딩 처리


3. 클라이언트에서 서버로 전송할 때 관련 정보를 가져오기


06/22

response
- HttpServletResponse

1. 돌려줄 HTML 페이지 제작
	- response.getWriter() > PrintWriter > HTML 제작
	- 서블릿 > 명시적
	- JSP > 암시적

2. 돌려줄 페이지의 인코딩 설정
	- response.setCharacterEncoding("UTF-8")
	- 서블릿 > 명시적
	- JSP > 명시적 > <%@ page pageEncoding="UTF-8" %>
	

3. 돌려줄 페이지의 MIME 설정

4. 페이지 이동하기



pageContext
- 페이지 실행에 필요한 컨텍스트 정보를 저장하거나, 다른 내장 객체를 접근하거나, 페이지를 이동하는 역할
	- ex14
	
	

out
- 응답 페이지 작성을 위한 출력 스트림 객체
- 서블릿의 PrintWriter와 동일한 역할
- ex15_out.jsp


session, application

application
- 애플리케이션 정보를 저장한 객체
- 서버와 관련된 정보 제공

session
- 클라이언트의 세션 정보를 저장한 객체
- 방문한 사용자 정보를 관리하는객체
	-> 세션: 접속한 상태를 표현.

- ex17_session.jsp
- ex17_set.jsp
- ex17_del.jsp
- ex17_interval.jsp
- ex17_reset.jsp




파일 업로드
- 업로드: 클라이언트측 자원 > 서버 전송 (= 파일 복사)
- 다운로드 서버측 자원 > 클라이언트 전송(= 파일 복사)
- 브라우저와 웹서버 간의 파일 복사


파일 업로드 라이브러리를 사용
- cos library > cos.jar
	-> 안정성도 높고 검증이 충분히 되어있음.
- http://www.servlets.com
- 다이나믹 웹 프로젝트는 jar 파일을 가져오는 방법이 다름
	-> webapp > WEB-INF> lib에 바로 jar파일 붙여넣기
- webapp > example > "files" 폴더 생성



단일 파일 업로드
-ex18_file_form.jsp
-ex18_file_ok.jsp


다중 파일 업로드
-ex19_file_form.jsp
-ex19_file_ok.jsp
 
파일 업로드 (다운없이 첨부파일을 읽고 쓰기)
-ex20_file_form.jsp
-ex20_file_ok.jsp
-ex20_file_delete.jsp (추가로)


내장 객체 > 저장소 제공 > pageContext, request, session, application > 생명주기
사용자 데이터 저장 > 4개의 객체 중 어떤 객체를 사용할지를 판단
-ex21_scope_1.jsp
-ex21_scope_2.jsp
-ex21_scope_3.jsp


EL 언어(Expression Language)
- <%= %> 기능을 대신하기 위해 만들어진 언어 > 가독성(코드 관리)
- 자바의 값을 HTML 페이지 소스에 출력하는 역할
- ${속성명}
- 일반적인 자바 데이터를 출력할 수 없다. > 변수, 상수, 메소드 반환값 등을 출력할 수 없다.
- pageContext, request, session, application 객체 내 저장소의 값만 출력할 수 있다.

-ex22_el.jsp


JSTL 액션 태그
- <c:XXX> 태그 사용
- c: > Namespace > 자바 패키지 역할
- JSP Standard Tag Libarary
- http://tomcat.apache.org/taglibs/standard/  > (1.2.3 들어가면) 1.2.5 > Impl
- ex23_jstl.jsp

















